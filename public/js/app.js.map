{"version":3,"sources":["js/app.js","js/controllers/auth.js","js/directives/googleMap.js","js/controllers/main.js","js/router.js","js/models/space.js","js/controllers/spaces.js","js/models/user.js","js/controllers/users.js"],"names":["Auth","$authProvider","API_URL","loginUrl","signupUrl","tokenPrefix","RegisterController","$auth","$state","submit","signup","register","user","then","go","this","LoginController","login","credentials","authenticate","provider","res","console","log","googleMap","$window","restrict","replace","template","scope","spaces","link","$scope","element","clearMarkers","markers","forEach","marker","setMap","map","google","maps","Map","center","lat","lng","zoom","scrollwheel","infoWindow","$watch","$resolved","space","Marker","position","animation","Animation","DROP","addListener","close","contentString","email","details","image","InfoWindow","content","open","push","googleplace","require","attrs","model","options","types","componentRestrictions","autocomplete","places","Autocomplete","place","getPlace","latlng","geometry","location","toJSON","$setViewValue","val","MainController","$rootScope","logout","secureState","e","toState","toParams","fromState","main","message","containerClass","name","isAuthenticated","attemptedRoute","preventDefault","unprotectedStates","includes","isLoggedIn","$on","Router","$stateProvider","$urlRouterProvider","state","url","templateUrl","controller","otherwise","Space","$resource","id","update","method","SpacesIndexController","spacesIndex","all","query","SpacesNewController","create","save","spacesNew","user_id","getPayload","SpacesShowController","User","deleteSpace","remove","spacesShow","get","delete","SpacesEditController","spacesEdit","$update","params","UserProfileController","deleteUser","userProfile","$remove","UserEditController","userEdit","angular","module","constant","config","$inject","directive","factory"],"mappings":"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","file":"app.js","sourcesContent":["angular.module('finalProject', ['ngResource', 'ui.router', 'satellizer'])\n.constant('API_URL', 'http://localhost:3000/api')\n.config(Auth);\n\nAuth.$inject = ['$authProvider', 'API_URL'];\nfunction Auth($authProvider, API_URL) {\n  $authProvider.loginUrl = `${API_URL}/login`;\n  $authProvider.signupUrl = `${API_URL}/register`;\n\n  $authProvider.tokenPrefix = '';\n}\n","angular.module('finalProject')\n.controller('RegisterController', RegisterController)\n.controller('LoginController', LoginController);\n\nRegisterController.$inject = ['$auth', '$state'];\nfunction RegisterController($auth, $state) {\n  const register = this;\n\n  register.user = {};\n\n  function submit() {\n    $auth.signup(register.user)\n    .then(() => {\n      $state.go('home');\n    });\n  }\n\n  register.submit = submit;\n}\n\nLoginController.$inject = ['$auth', '$state'];\nfunction LoginController($auth, $state) {\n  const login = this;\n\n  login.credentials = {};\n\n  function submit() {\n    $auth.login(login.credentials)\n    .then(() => {\n      $state.go('userProfile');\n    });\n  }\n\n  function authenticate(provider) {\n    $auth.authenticate(provider)\n    .then((res) => {\n      console.log(res);\n    });\n  }\n\n  login.submit = submit;\n  login.authenticate = authenticate;\n}\n","angular.module('finalProject')\n.directive('googleMap', googleMap)\n.directive('googleplace', googleplace);\n\n\ngoogleMap.$inject = ['$window'];\nfunction googleMap($window) {\n  return {\n    restrict: 'E',\n    replace: true,\n    template: '<div class=\"google-map\"></div>',\n    scope: {\n      spaces: '='\n    },\n    link: function($scope, element) {\n      const map = new $window.google.maps.Map(element[0], {\n        center: {\n          lat: 51.508530,\n          lng: -0.076132\n        },\n        zoom: 9,\n        scrollwheel: false\n      });\n\n      let markers = [];\n      // let allInfoWindows = [];\n      let infoWindow = null;\n\n      function clearMarkers() {\n        markers.forEach((marker) => {\n          marker.setMap(null);\n        });\n        markers = [];\n      }\n\n      $scope.$watch('spaces', () => {\n        clearMarkers();\n        if($scope.spaces.$resolved) {\n          $scope.spaces.forEach((space) => {\n            // console.log(space);\n            if(space.lat && space.lng) {\n              const marker = new\n              $window.google.maps.Marker({\n                position: { lat: space.lat, lng: space.lng },\n                map: map,\n                animation: $window.google.maps.Animation.DROP\n              });\n              marker.addListener('click', () => {\n                if(infoWindow) {\n                  infoWindow.close();\n                }\n\n                const contentString = `\n                <p>Contact: <a href=\"mailto:${space.user.email}?subject=Query about your parking space\">${space.user.email}</a></p>\n                <p>${space.details}</p>\n                <img src=${space.image}>`;\n\n                infoWindow = new $window.google.maps.InfoWindow({\n                  content: contentString\n                });\n\n                infoWindow.open(map, marker);\n                markers.push(marker);\n              });\n            }\n          });\n        }\n      }, true);\n    }\n  };\n}\n\n\n// Autocomplete BELOW\ngoogleplace.$inject = ['$window'];\nfunction googleplace($window) {\n  return {\n    restrict: 'A',\n    require: 'ngModel',\n    scope: {\n      spaces: '='\n    },\n    link: function(scope, element, attrs, model) {\n      const options = {\n        types: [],\n        componentRestrictions: {}\n      };\n\n      const autocomplete = new $window.google.maps.places.Autocomplete(element[0], options);\n\n      autocomplete.addListener('place_changed', () => {\n        const place = autocomplete.getPlace();\n        const latlng = place.geometry.location.toJSON();\n\n        scope.spaces.lat = latlng.lat;\n        scope.spaces.lng = latlng.lng;\n\n        console.log(place);\n        model.$setViewValue(element.val());\n      });\n    }\n  };\n}\n// Autocomplete ends\n","angular.module('finalProject')\n.controller('MainController', MainController);\n\nMainController.$inject = ['$auth', '$state', '$rootScope'];\nfunction MainController($auth, $state, $rootScope) {\n  const main = this;\n\n  main.isLoggedIn = $auth.isAuthenticated;\n  main.message = null;\n\n  function logout() {\n    $auth.logout()\n    .then(() => {\n      $state.go('home');\n    });\n  }\n  // Ask Mike for seccont explanation\n  // -------------------------------->\n  const unprotectedStates = ['home', 'register', 'login'];\n  let attemptedRoute = null;\n\n  function secureState(e, toState, toParams, fromState) {\n    main.message = null;\n\n    main.containerClass = toState.name !== 'spacesIndex' ? true : false;\n\n    if($auth.isAuthenticated() && attemptedRoute === 'spacesIndex' && toState.name === 'userProfile') {\n      e.preventDefault();\n      $state.go(attemptedRoute);\n      // console.log(attemptedRoute);\n      attemptedRoute = null;\n    }\n\n    if(!$auth.isAuthenticated() && !unprotectedStates.includes(toState.name)) {\n\n      if(fromState.name === 'home') attemptedRoute = toState.name;\n      // console.log(attemptedRoute);\n\n      e.preventDefault();\n      $state.go('login');\n      main.message = 'You must be logged in to go there!';\n    }\n  }\n// <-----------------------------------\n  $rootScope.$on('$stateChangeStart', secureState);\n\n  main.logout = logout;\n}\n","angular.module('finalProject')\n.config(Router);\n\nRouter.$inject = ['$stateProvider', '$urlRouterProvider'];\nfunction Router($stateProvider, $urlRouterProvider) {\n  $stateProvider\n  .state('home', {\n    url: '/',\n    templateUrl: '/templates/landingPage.html'\n  })\n  .state('userProfile', {\n    url: '/profile',\n    templateUrl: '/templates/userProfile.html',\n    controller: 'UserProfileController as userProfile'\n  })\n  .state('usersEdit', {\n    url: '/profile/edit',\n    templateUrl: '/templates/userEdit.html',\n    controller: 'UserEditController as userEdit'\n  })\n  .state('register', {\n    url: '/register',\n    templateUrl: '/templates/register.html',\n    controller: 'RegisterController as register'\n  })\n  .state('login', {\n    url: '/login',\n    templateUrl: '/templates/login.html',\n    controller: 'LoginController as login'\n  })\n  .state('spacesIndex', {\n    url: '/spaces',\n    templateUrl: '/templates/spacesIndex.html',\n    controller: 'SpacesIndexController as spacesIndex'\n  })\n  .state('spacesAdd', {\n    url: '/spaces/add',\n    templateUrl: '/templates/spacesAdd.html',\n    controller: 'SpacesNewController as spacesNew'\n  })\n  .state('spacesEdit', {\n    url: '/spaces/:id/edit',\n    templateUrl: '/templates/spacesEdit.html',\n    controller: 'SpacesEditController as spacesEdit'\n  })\n  .state('spacesShow', {\n    url: '/spaces/show',\n    templateUrl: '/templates/spacesShow.html',\n    controller: 'SpacesShowController as spacesShow'\n  });\n\n  $urlRouterProvider.otherwise('/');\n}\n","angular.module('finalProject')\n.factory('Space', Space);\n\nSpace.$inject = ['$resource', 'API_URL'];\nfunction Space($resource, API_URL) {\n  return new $resource(`${API_URL}/spaces/:id`, { id: '@id' }, {\n    update: { method: 'PUT' }\n  });\n}\n","angular.module('finalProject')\n.controller('SpacesIndexController', SpacesIndexController)\n.controller('SpacesNewController', SpacesNewController)\n.controller('SpacesShowController', SpacesShowController)\n.controller('SpacesEditController', SpacesEditController);\n\nSpacesIndexController.$inject = ['Space'];\nfunction SpacesIndexController(Space) {\n  const spacesIndex = this;\n\n  spacesIndex.all = Space.query();\n}\n\nSpacesNewController.$inject = ['Space', '$state', '$auth'];\nfunction SpacesNewController(Space, $state, $auth) {\n  const spacesNew = this;\n\n  spacesNew.spaces = {};\n  spacesNew.spaces.user_id = $auth.getPayload().id;\n\n  function create() {\n    Space.save(spacesNew.spaces, () => {\n      $state.go('spacesIndex');\n    });\n  }\n\n  spacesNew.create = create;\n}\n\nSpacesShowController.$inject = ['Space', 'User', '$state', '$auth'];\nfunction SpacesShowController(Space, User, $state , $auth) {\n  const spacesShow = this;\n\n  spacesShow.user = User.get({id: $auth.getPayload().id});\n\n  function deleteSpace(space) {\n    Space.remove({id: space.id}, () => {\n      $state.go('spacesIndex');\n    });\n  }\n\n  spacesShow.delete = deleteSpace;\n  spacesShow.isLoggedIn = $auth.isAuthenticated;\n}\n\nSpacesEditController.$inject = ['Space', '$state'];\nfunction SpacesEditController(Space, $state) {\n  const spacesEdit = this;\n\n  spacesEdit.space = Space.get($state.params);\n\n  function update() {\n    spacesEdit.space.$update(() => {\n      $state.go('spacesIndex');\n    });\n  }\n\n  this.update = update;\n\n}\n","angular.module('finalProject')\n.factory('User', User);\n\nUser.$inject = ['$resource', 'API_URL'];\nfunction User($resource, API_URL) {\n  return new $resource(`${API_URL}/users/:id`, { id: '@id' }, {\n    update: { method: 'PUT' }\n  });\n}\n","angular.module('finalProject')\n  .controller('UserProfileController', UserProfileController)\n  .controller('UserEditController', UserEditController);\n\nUserProfileController.$inject = ['User', '$state', '$auth'];\nfunction UserProfileController(User, $state , $auth) {\n  const userProfile = this;\n\n  userProfile.user = User.get({id: $auth.getPayload().id});\n\n  function deleteUser() {\n    userProfile.user.$remove(() => {\n      $state.go('home');\n    });\n  }\n\n  userProfile.delete = deleteUser;\n  userProfile.isLoggedIn = $auth.isAuthenticated;\n}\n\nUserEditController.$inject = ['User', '$state', '$auth'];\nfunction UserEditController(User, $state, $auth) {\n  const userEdit = this;\n\n  userEdit.user = User.get({ id: $auth.getPayload().id });\n\n  function update() {\n    userEdit.user.$update(() => {\n      $state.go('userProfile', $state.params);\n    });\n  }\n\n  this.update = update;\n\n}\n"]}