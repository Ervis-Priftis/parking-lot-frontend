{"version":3,"sources":["js/app.js","js/controllers/auth.js","js/directives/googleMap.js","js/controllers/main.js","js/router.js","js/models/space.js","js/controllers/spaces.js","js/models/user.js","js/controllers/users.js"],"names":["Auth","$authProvider","API_URL","loginUrl","signupUrl","tokenPrefix","RegisterController","$auth","$state","submit","signup","register","user","then","go","this","LoginController","login","credentials","authenticate","provider","res","console","log","googleMap","$window","restrict","replace","template","scope","center","link","$scope","element","map","google","maps","Map","zoom","scrollwheel","Marker","position","animation","Animation","DROP","MainController","$rootScope","logout","secureState","e","toState","toParams","fromState","main","message","isAuthenticated","attemptedRoute","name","preventDefault","unprotectedStates","includes","isLoggedIn","$on","Router","$stateProvider","$urlRouterProvider","state","url","templateUrl","controller","otherwise","Space","$resource","id","update","method","SpacesIndexController","spacesIndex","all","query","SpacesNewController","create","save","spacesNew","spaces","user_id","getPayload","SpacesShowController","deleteSpace","spacesShow","space","$remove","get","params","delete","SpacesEditController","spacesEdit","$update","User","UserProfileController","deleteUser","userProfile","UserEditController","userEdit","angular","module","constant","config","$inject","directive","factory"],"mappings":"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","file":"app.js","sourcesContent":["angular.module('finalProject', ['ngResource', 'ui.router', 'satellizer'])\n.constant('API_URL', 'http://localhost:3000/api')\n.config(Auth);\n\nAuth.$inject = ['$authProvider', 'API_URL'];\nfunction Auth($authProvider, API_URL) {\n  $authProvider.loginUrl = `${API_URL}/login`;\n  $authProvider.signupUrl = `${API_URL}/register`;\n\n  $authProvider.tokenPrefix = '';\n}\n","angular.module('finalProject')\n.controller('RegisterController', RegisterController)\n.controller('LoginController', LoginController);\n\nRegisterController.$inject = ['$auth', '$state'];\nfunction RegisterController($auth, $state) {\n  const register = this;\n\n  register.user = {};\n\n  function submit() {\n    $auth.signup(register.user)\n    .then(() => {\n      $state.go('login');\n    });\n  }\n\n  register.submit = submit;\n}\n\nLoginController.$inject = ['$auth', '$state'];\nfunction LoginController($auth, $state) {\n  const login = this;\n\n  login.credentials = {};\n\n  function submit() {\n    $auth.login(login.credentials)\n    .then(() => {\n      $state.go('userProfile');\n    });\n  }\n\n  function authenticate(provider) {\n    $auth.authenticate(provider)\n    .then((res) => {\n      console.log(res);\n    });\n  }\n\n  login.submit = submit;\n  login.authenticate = authenticate;\n}\n","angular.module('finalProject')\n.directive('googleMap', googleMap);\n\ngoogleMap.$inject = ['$window'];\nfunction googleMap($window) {\n  return {\n    restrict: 'E',\n    replace: true,\n    template: '<div class=\"google-map\"></div>',\n    scope: {\n      center: '='\n    },\n    link: function($scope, element) {\n      const map = new $window.google.maps.Map(element[0], {\n        center: $scope.center,\n        zoom: 10,\n        scrollwheel: false\n      });\n\n      new $window.google.maps.Marker({\n        position: $scope.center,\n        map: map,\n        animation: $window.google.maps.Animation.DROP\n      });\n    }\n  };\n}\n\n\n\n// angular.module('finalProject')\n// .directive('googleMap', googleMap)\n// .directive('googleplace', googleplace);\n//\n// // Autocomplete BELOW\n// googleplace.$inject = ['$window'];\n// function googleplace($window) {\n//   return {\n//     restrict: 'A',\n//     require: 'ngModel',\n//     scope: {\n//       location: '='\n//     },\n//     link: function(scope, element, attrs, model) {\n//       const options = {\n//         types: [],\n//         componentRestrictions: {}\n//       };\n//\n//       const autocomplete = new $window.google.maps.places.Autocomplete(element[0], options);\n//\n//       autocomplete.addListener('place_changed', () => {\n//         const place = autocomplete.getPlace();\n//         scope.location = place.geometry.location.toJSON();\n//         model.$setViewValue(element.val());\n//       });\n//     }\n//   };\n// }\n// // Autocomplete ends\n//\n// googleMap.$inject = ['$window'];\n// function googleMap($window) {\n//\n//   return {\n//     restrict: 'E',\n//     replace: true,\n//     template: '<div class=\"google-map\">Google Map HERE</div>',\n//     scope: {\n//       element: '='\n//     },\n//     link: function(scope, element) {\n//       scope.$watch('element', () => {\n//         if(scope.element) {\n//\n//           const map = new $window.google.maps.Map(element[0], {\n//             center: scope.element,\n//             zoom: 6,\n//             scrollwheel: false\n//           });\n//\n//           new $window.google.maps.Marker({\n//             position: scope.element,\n//             map: map,\n//             animation: $window.google.maps.Animation.DROP\n//           });\n//         }\n//       });\n//\n//     }\n//   };\n// }\n","angular.module('finalProject')\n.controller('MainController', MainController);\n\nMainController.$inject = ['$auth', '$state', '$rootScope'];\nfunction MainController($auth, $state, $rootScope) {\n  const main = this;\n\n  main.isLoggedIn = $auth.isAuthenticated;\n  main.message = null;\n\n  function logout() {\n    $auth.logout()\n    .then(() => {\n      $state.go('home');\n    });\n  }\n  // Ask Mike for seccont explanation\n  // -------------------------------->\n  const unprotectedStates = ['home', 'register', 'login'];\n  let attemptedRoute = null;\n\n  function secureState(e, toState, toParams, fromState) {\n    main.message = null;\n\n    if($auth.isAuthenticated() && attemptedRoute === 'spacesIndex' && toState.name === 'userProfile') {\n      e.preventDefault();\n      $state.go(attemptedRoute);\n      // console.log(attemptedRoute);\n      attemptedRoute = null;\n    }\n\n    if(!$auth.isAuthenticated() && !unprotectedStates.includes(toState.name)) {\n\n      if(fromState.name === 'home') attemptedRoute = toState.name;\n      // console.log(attemptedRoute);\n\n      e.preventDefault();\n      $state.go('login');\n      main.message = 'You must be logged in to go there!';\n    }\n  }\n// <-----------------------------------\n  $rootScope.$on('$stateChangeStart', secureState);\n\n  main.logout = logout;\n}\n","angular.module('finalProject')\n.config(Router);\n\nRouter.$inject = ['$stateProvider', '$urlRouterProvider'];\nfunction Router($stateProvider, $urlRouterProvider) {\n  $stateProvider\n  .state('home', {\n    url: '/',\n    templateUrl: '/templates/landingPage.html'\n  })\n  .state('userProfile', {\n    url: '/profile',\n    templateUrl: '/templates/userProfile.html',\n    controller: 'UserProfileController as userProfile'\n  })\n  .state('usersEdit', {\n    url: '/profile/edit',\n    templateUrl: '/templates/userEdit.html',\n    controller: 'UserEditController as userEdit'\n  })\n  .state('register', {\n    url: '/register',\n    templateUrl: '/templates/register.html',\n    controller: 'RegisterController as register'\n  })\n  .state('login', {\n    url: '/login',\n    templateUrl: '/templates/login.html',\n    controller: 'LoginController as login'\n  })\n  .state('spacesIndex', {\n    url: '/spaces',\n    templateUrl: '/templates/spacesIndex.html',\n    controller: 'SpacesIndexController as spacesIndex'\n  })\n  .state('spacesAdd', {\n    url: '/spaces/add',\n    templateUrl: '/templates/spacesAdd.html',\n    controller: 'SpacesNewController as spacesNew'\n  })\n  .state('spacesEdit', {\n    url: '/spaces/:id/edit',\n    templateUrl: '/templates/spacesEdit.html',\n    controller: 'SpacesEditController as spacesEdit'\n  })\n  // .state('spacesShow', {\n  //   url: '/spaces/Show',\n  //   templateUrl: '/templates/spacesShow.html',\n  //   controller: 'spacesShowController as spacesShow'\n  // })\n  ;\n\n  $urlRouterProvider.otherwise('/');\n}\n","angular.module('finalProject')\n.factory('Space', Space);\n\nSpace.$inject = ['$resource', 'API_URL'];\nfunction Space($resource, API_URL) {\n  return new $resource(`${API_URL}/spaces/:id`, { id: '@id' }, {\n    update: { method: 'PUT' }\n  });\n}\n","angular.module('finalProject')\n.controller('SpacesIndexController', SpacesIndexController)\n.controller('SpacesNewController', SpacesNewController)\n.controller('SpacesShowController', SpacesShowController)\n.controller('SpacesEditController', SpacesEditController);\n\nSpacesIndexController.$inject = ['Space'];\nfunction SpacesIndexController(Space) {\n  const spacesIndex = this;\n\n  spacesIndex.all = Space.query();\n}\n\nSpacesNewController.$inject = ['Space', '$state', '$auth'];\nfunction SpacesNewController(Space, $state, $auth) {\n  const spacesNew = this;\n\n  spacesNew.spaces = {};\n  spacesNew.spaces.user_id = $auth.getPayload().id;\n\n  function create() {\n    Space.save(spacesNew.spaces, () => {\n      $state.go('spacesIndex');\n    });\n  }\n\n  spacesNew.create = create;\n}\n\nSpacesShowController.$inject = ['Space', '$state', '$auth'];\nfunction SpacesShowController(Space, $state , $auth) {\n  const spacesShow = this;\n\n  spacesShow.space = Space.get($state.params);\n\n  function deleteSpace() {\n    spacesShow.space.$remove(() => {\n      $state.go('spacesIndex');\n    });\n  }\n\n  spacesShow.delete = deleteSpace;\n  spacesShow.isLoggedIn = $auth.isAuthenticated;\n}\n\nSpacesEditController.$inject = ['Space', '$state', '$auth'];\nfunction SpacesEditController(Space, $state, $auth) {\n  const spacesEdit = this;\n\n  spacesEdit.spaces = Space.get($state.params);\n  spacesEdit.spaces.user_id = $auth.getPayload().id;\n\n  function update() {\n    spacesEdit.space.$update(() => {\n      $state.go('spacesShow', $state.params);\n    });\n    // Space.update($state.params, spacesEdit.space, (res) => {\n    //   console.log(res);\n    // });\n  }\n\n  this.update = update;\n\n}\n","angular.module('finalProject')\n.factory('User', User);\n\nUser.$inject = ['$resource', 'API_URL'];\nfunction User($resource, API_URL) {\n  return new $resource(`${API_URL}/users/:id`, { id: '@id' }, {\n    update: { method: 'PUT' }\n  });\n}\n","angular.module('finalProject')\n  .controller('UserProfileController', UserProfileController)\n  .controller('UserEditController', UserEditController);\n\nUserProfileController.$inject = ['User', '$state', '$auth'];\nfunction UserProfileController(User, $state , $auth) {\n  const userProfile = this;\n\n  userProfile.user = User.get({id: $auth.getPayload().id});\n\n  function deleteUser() {\n    // console.log('I\\'m trying to delete a user...');\n    userProfile.user.$remove(() => {\n      $state.go('home');\n    });\n  }\n\n  userProfile.delete = deleteUser;\n  userProfile.isLoggedIn = $auth.isAuthenticated;\n}\n\nUserEditController.$inject = ['User', '$state', '$auth'];\nfunction UserEditController(User, $state, $auth) {\n  const userEdit = this;\n\n  userEdit.user = User.get({ id: $auth.getPayload().id });\n\n  function update() {\n    userEdit.user.$update(() => {\n      $state.go('userProfile', $state.params);\n    });\n  }\n\n  this.update = update;\n\n}\n"]}