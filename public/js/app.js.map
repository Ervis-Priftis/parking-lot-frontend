{"version":3,"sources":["js/app.js","js/controllers/auth.js","js/directives/googleMap.js","js/controllers/main.js","js/router.js","js/models/space.js","js/controllers/spaces.js","js/models/user.js","js/controllers/users.js"],"names":["Auth","$authProvider","API_URL","loginUrl","signupUrl","tokenPrefix","RegisterController","$auth","$state","submit","signup","register","user","then","go","this","LoginController","login","credentials","authenticate","provider","res","console","log","googleMap","$window","restrict","replace","template","scope","spaces","link","$scope","element","clearMarkers","markers","forEach","marker","setMap","map","google","maps","Map","center","lat","lng","zoom","scrollwheel","$watch","$resolved","space","Marker","position","animation","Animation","DROP","push","googleplace","require","attrs","model","options","types","componentRestrictions","autocomplete","places","Autocomplete","addListener","place","getPlace","latlng","geometry","location","toJSON","$setViewValue","val","MainController","$rootScope","logout","secureState","e","toState","toParams","fromState","main","message","isAuthenticated","attemptedRoute","name","preventDefault","unprotectedStates","includes","isLoggedIn","$on","Router","$stateProvider","$urlRouterProvider","state","url","templateUrl","controller","otherwise","Space","$resource","id","update","method","SpacesIndexController","spacesIndex","all","query","SpacesNewController","create","save","spacesNew","user_id","getPayload","SpacesShowController","deleteSpace","spacesShow","$remove","get","params","delete","SpacesEditController","spacesEdit","$update","User","UserProfileController","deleteUser","userProfile","UserEditController","userEdit","angular","module","constant","config","$inject","directive","factory"],"mappings":"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","file":"app.js","sourcesContent":["angular.module('finalProject', ['ngResource', 'ui.router', 'satellizer'])\n.constant('API_URL', 'http://localhost:3000/api')\n.config(Auth);\n\nAuth.$inject = ['$authProvider', 'API_URL'];\nfunction Auth($authProvider, API_URL) {\n  $authProvider.loginUrl = `${API_URL}/login`;\n  $authProvider.signupUrl = `${API_URL}/register`;\n\n  $authProvider.tokenPrefix = '';\n}\n","angular.module('finalProject')\n.controller('RegisterController', RegisterController)\n.controller('LoginController', LoginController);\n\nRegisterController.$inject = ['$auth', '$state'];\nfunction RegisterController($auth, $state) {\n  const register = this;\n\n  register.user = {};\n\n  function submit() {\n    $auth.signup(register.user)\n    .then(() => {\n      $state.go('login');\n    });\n  }\n\n  register.submit = submit;\n}\n\nLoginController.$inject = ['$auth', '$state'];\nfunction LoginController($auth, $state) {\n  const login = this;\n\n  login.credentials = {};\n\n  function submit() {\n    $auth.login(login.credentials)\n    .then(() => {\n      $state.go('userProfile');\n    });\n  }\n\n  function authenticate(provider) {\n    $auth.authenticate(provider)\n    .then((res) => {\n      console.log(res);\n    });\n  }\n\n  login.submit = submit;\n  login.authenticate = authenticate;\n}\n","angular.module('finalProject')\n.directive('googleMap', googleMap)\n.directive('googleplace', googleplace);\n\n\ngoogleMap.$inject = ['$window'];\nfunction googleMap($window) {\n  return {\n    restrict: 'E',\n    replace: true,\n    template: '<div class=\"google-map\"></div>',\n    scope: {\n      spaces: '='\n    },\n    link: function($scope, element) {\n      const map = new $window.google.maps.Map(element[0], {\n        center: {\n          lat: 51.508530,\n          lng: -0.076132\n        },\n        zoom: 10,\n        scrollwheel: false\n      });\n\n      let markers = [];\n      function clearMarkers() {\n        markers.forEach((marker) => {\n          marker.setMap(null);\n        });\n        markers = [];\n      }\n\n      $scope.$watch('spaces', () => {\n        clearMarkers();\n        if($scope.spaces.$resolved) {\n          $scope.spaces.forEach((space) => {\n            // console.log(space);\n            if(space.lat && space.lng) {\n              const marker = new\n              $window.google.maps.Marker({\n                position: { lat: space.lat, lng: space.lng },\n                map: map,\n                animation: $window.google.maps.Animation.DROP\n              });\n              markers.push(marker);\n            }\n          });\n        }\n      }, true);\n    }\n  };\n}\n\n\n// marker.addListener('click', () => {\n//   infoWindow.open(map, marker);\n//   markers.push(marker);\n//\n// const contentString = `\n// <p>Value: ${space.image}</p>\n// <p>Earliest Pickup: ${userEdit.user.email}</p>\n// `;\n// const infoWindow = new $window.google.maps.InfoWindow({\n//   content: contentString\n// });\n\n\n// Autocomplete BELOW\ngoogleplace.$inject = ['$window'];\nfunction googleplace($window) {\n  return {\n    restrict: 'A',\n    require: 'ngModel',\n    scope: {\n      spaces: '='\n    },\n    link: function(scope, element, attrs, model) {\n      const options = {\n        types: [],\n        componentRestrictions: {}\n      };\n\n      const autocomplete = new $window.google.maps.places.Autocomplete(element[0], options);\n\n      autocomplete.addListener('place_changed', () => {\n        const place = autocomplete.getPlace();\n        const latlng = place.geometry.location.toJSON();\n\n        scope.spaces.lat = latlng.lat;\n        scope.spaces.lng = latlng.lng;\n\n        console.log(place);\n        model.$setViewValue(element.val());\n      });\n    }\n  };\n}\n// Autocomplete ends\n","angular.module('finalProject')\n.controller('MainController', MainController);\n\nMainController.$inject = ['$auth', '$state', '$rootScope'];\nfunction MainController($auth, $state, $rootScope) {\n  const main = this;\n\n  main.isLoggedIn = $auth.isAuthenticated;\n  main.message = null;\n\n  function logout() {\n    $auth.logout()\n    .then(() => {\n      $state.go('home');\n    });\n  }\n  // Ask Mike for seccont explanation\n  // -------------------------------->\n  const unprotectedStates = ['home', 'register', 'login'];\n  let attemptedRoute = null;\n\n  function secureState(e, toState, toParams, fromState) {\n    main.message = null;\n\n    if($auth.isAuthenticated() && attemptedRoute === 'spacesIndex' && toState.name === 'userProfile') {\n      e.preventDefault();\n      $state.go(attemptedRoute);\n      // console.log(attemptedRoute);\n      attemptedRoute = null;\n    }\n\n    if(!$auth.isAuthenticated() && !unprotectedStates.includes(toState.name)) {\n\n      if(fromState.name === 'home') attemptedRoute = toState.name;\n      // console.log(attemptedRoute);\n\n      e.preventDefault();\n      $state.go('login');\n      main.message = 'You must be logged in to go there!';\n    }\n  }\n// <-----------------------------------\n  $rootScope.$on('$stateChangeStart', secureState);\n\n  main.logout = logout;\n}\n","angular.module('finalProject')\n.config(Router);\n\nRouter.$inject = ['$stateProvider', '$urlRouterProvider'];\nfunction Router($stateProvider, $urlRouterProvider) {\n  $stateProvider\n  .state('home', {\n    url: '/',\n    templateUrl: '/templates/landingPage.html'\n  })\n  .state('userProfile', {\n    url: '/profile',\n    templateUrl: '/templates/userProfile.html',\n    controller: 'UserProfileController as userProfile'\n  })\n  .state('usersEdit', {\n    url: '/profile/edit',\n    templateUrl: '/templates/userEdit.html',\n    controller: 'UserEditController as userEdit'\n  })\n  .state('register', {\n    url: '/register',\n    templateUrl: '/templates/register.html',\n    controller: 'RegisterController as register'\n  })\n  .state('login', {\n    url: '/login',\n    templateUrl: '/templates/login.html',\n    controller: 'LoginController as login'\n  })\n  .state('spacesIndex', {\n    url: '/spaces',\n    templateUrl: '/templates/spacesIndex.html',\n    controller: 'SpacesIndexController as spacesIndex'\n  })\n  .state('spacesAdd', {\n    url: '/spaces/add',\n    templateUrl: '/templates/spacesAdd.html',\n    controller: 'SpacesNewController as spacesNew'\n  })\n  .state('spacesEdit', {\n    url: '/spaces/:id/edit',\n    templateUrl: '/templates/spacesEdit.html',\n    controller: 'SpacesEditController as spacesEdit'\n  })\n  .state('spacesShow', {\n    url: '/spaces/Show',\n    templateUrl: '/templates/spacesShow.html',\n    controller: 'UserProfileController as userProfile'\n  });\n\n  $urlRouterProvider.otherwise('/');\n}\n","angular.module('finalProject')\n.factory('Space', Space);\n\nSpace.$inject = ['$resource', 'API_URL'];\nfunction Space($resource, API_URL) {\n  return new $resource(`${API_URL}/spaces/:id`, { id: '@id' }, {\n    update: { method: 'PUT' }\n  });\n}\n","angular.module('finalProject')\n.controller('SpacesIndexController', SpacesIndexController)\n.controller('SpacesNewController', SpacesNewController)\n.controller('SpacesShowController', SpacesShowController)\n.controller('SpacesEditController', SpacesEditController);\n\nSpacesIndexController.$inject = ['Space'];\nfunction SpacesIndexController(Space) {\n  const spacesIndex = this;\n\n  spacesIndex.all = Space.query();\n}\n\nSpacesNewController.$inject = ['Space', '$state', '$auth'];\nfunction SpacesNewController(Space, $state, $auth) {\n  const spacesNew = this;\n\n  spacesNew.spaces = {};\n  spacesNew.spaces.user_id = $auth.getPayload().id;\n\n  function create() {\n    Space.save(spacesNew.spaces, () => {\n      $state.go('spacesIndex');\n    });\n  }\n\n  spacesNew.create = create;\n}\n\nSpacesShowController.$inject = ['Space', '$state', '$auth'];\nfunction SpacesShowController(Space, $state , $auth) {\n  const spacesShow = this;\n\n  spacesShow.space = Space.get($state.params);\n\n  function deleteSpace() {\n    spacesShow.space.$remove(() => {\n      $state.go('spacesIndex');\n    });\n  }\n\n  spacesShow.delete = deleteSpace;\n  spacesShow.isLoggedIn = $auth.isAuthenticated;\n}\n\nSpacesEditController.$inject = ['Space', '$state'];\nfunction SpacesEditController(Space, $state) {\n  const spacesEdit = this;\n\n  spacesEdit.space = Space.get($state.params);\n\n  function update() {\n    spacesEdit.space.$update(() => {\n      $state.go('spacesIndex');\n    });\n  }\n\n  this.update = update;\n\n}\n","angular.module('finalProject')\n.factory('User', User);\n\nUser.$inject = ['$resource', 'API_URL'];\nfunction User($resource, API_URL) {\n  return new $resource(`${API_URL}/users/:id`, { id: '@id' }, {\n    update: { method: 'PUT' }\n  });\n}\n","angular.module('finalProject')\n  .controller('UserProfileController', UserProfileController)\n  .controller('UserEditController', UserEditController);\n\nUserProfileController.$inject = ['User', '$state', '$auth'];\nfunction UserProfileController(User, $state , $auth) {\n  const userProfile = this;\n\n  userProfile.user = User.get({id: $auth.getPayload().id});\n\n  function deleteUser() {\n    // console.log('I\\'m trying to delete a user...');\n    userProfile.user.$remove(() => {\n      $state.go('home');\n    });\n  }\n  // userProfile.spaces = userProfile.user.space_ids;\n  userProfile.delete = deleteUser;\n  userProfile.isLoggedIn = $auth.isAuthenticated;\n}\n\nUserEditController.$inject = ['User', '$state', '$auth'];\nfunction UserEditController(User, $state, $auth) {\n  const userEdit = this;\n\n  userEdit.user = User.get({ id: $auth.getPayload().id });\n\n  function update() {\n    userEdit.user.$update(() => {\n      $state.go('userProfile', $state.params);\n    });\n  }\n\n  this.update = update;\n\n}\n"]}